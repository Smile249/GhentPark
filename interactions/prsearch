const { SlashCommandBuilder, Client, Events } = require("@discordjs/builders");
const fetch = require("node-fetch");
const {
  EmbedBuilder,
  ActionRowBuilder,
  ButtonBuilder,
  ButtonStyle,
  ActivityType,
} = require("discord.js");

function convert_to_float(a) {
¬†¬†¬†¬†¬†¬†¬†¬†¬†
  ¬†¬†¬†¬†¬†¬†¬†¬†// Type conversion
  ¬†¬†¬†¬†¬†¬†¬†¬†// of string to float
  ¬†¬†¬†¬†¬†¬†¬†¬†var floatValue = +(a);
  ¬†¬†¬†¬†¬†¬†¬†¬†¬†
  ¬†¬†¬†¬†¬†¬†¬†¬†// Return float value
  ¬†¬†¬†¬†¬†¬†¬†¬†return floatValue;
  ¬†¬†¬†¬†}

module.exports = {
  data: new SlashCommandBuilder()
    .setName("prsearch")
    .setDMPermission(true)
    .setDescription("Search for a public parking place/P+R in zone Ghent with a query.")
    .addStringOption((option) =>
      option
        .setName("query")
        .setDescription(
          "Enter the name of the place."
        )
        .setRequired(true)
    ),
  async execute(interaction, client) {
    await interaction.deferReply();

    fetch(
      "https://data.stad.gent/api/records/1.0/search/?dataset=locaties-openbare-parkings-gent&q=" + interaction.options.getString("query") + "&lang=en&rows=1&sort="
    )
      .then((res) => res.json())
      .then((data) => {
        if (data.error || data.errorMessage || data.records[0] == null) {
          console.log("The following error occurred: " + data.errorMessage);
          let errorEmbed = new EmbedBuilder()
          .setTitle("Nothing was found!")

          return interaction.editReply({
            embeds: [errorEmbed],
            ephemeral: true,
          });
        }

        let freePark;
        switch(true){
          case data.records[0].fields.naam == "Galveston":
            freePark = "‚ùå"
            break;
          case data.records[0].fields.naam == "Sint-Pietersstation":
            freePark = "‚ùå"
            break;
          case data.records[0].fields.naam == "Ledeberg":
            freePark = "‚ùå"
            break;
          case data.records[0].fields.naam == "Gent Sint-Pieters":
            freePark = "üüß Free bicycle parking, car parking paid"
            break;
          case data.records[0].fields.naam == "Dampoort":
            freePark = "üüß Free bicycle parking, car parking paid"
            break;
          default:
            freePark = "‚úÖ"
            break;
          
        }

        let parkingEmbed = new EmbedBuilder() 
        .setTitle("Results for: " + interaction.options.getString("query"))
        .setURL(data.records[0].fields.url)
        .setDescription(data.records[0].fields.type + " | " + data.records[0].fields.naam)
        .setColor("#FFA500")
        .addFields({
          name: "Capacity:",
          value: JSON.stringify(data.records[0].fields.capaciteit)
        })
        .addFields({
          name: "Free parking?",
          value: freePark
        })

        return interaction.editReply({ embeds: [parkingEmbed] });
      });
  },
};
